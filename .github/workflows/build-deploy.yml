name: Build and Deploy AMI

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if no changes"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  APP_NAME: streamlit-app

jobs:
  build-ami:
    runs-on: ubuntu-latest
    outputs:
      ami-id: ${{ steps.build.outputs.ami-id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Initialize Packer
        run: |
          cd packer
          packer init .

      - name: Validate Packer template
        run: |
          cd packer
          packer validate streamlit-app.pkr.hcl

      - name: Build AMI
        id: build
        run: |
          cd packer
          packer build \
            -var "app_version=${{ github.sha }}" \
            streamlit-app.pkr.hcl | tee build.log

          # Extract AMI ID from build log
          AMI_ID=$(grep -oP 'ami-\w+' build.log | tail -1)
          echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "Built AMI: $AMI_ID"

  deploy:
    needs: build-ami
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy New Instance
        run: |
          # Terminate existing instance (if using single instance)
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.APP_NAME }}" \
                     "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)

          if [ "$INSTANCE_ID" != "None" ] && [ "$INSTANCE_ID" != "null" ]; then
            echo "Terminating existing instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
            
            # Wait for termination
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
          fi

          # Launch new instance
          echo "Launching new instance with AMI: ${{ needs.build-ami.outputs.ami-id }}"
          NEW_INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ needs.build-ami.outputs.ami-id }} \
            --instance-type t2.micro \
            --security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
            --iam-instance-profile Name=${{ secrets.IAM_INSTANCE_PROFILE }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${{ env.APP_NAME }}},{Key=Environment,Value=production}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "New instance launched: $NEW_INSTANCE_ID"

          # Wait for instance to be running
          aws ec2 wait instance-running --instance-ids $NEW_INSTANCE_ID

          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $NEW_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "Application deployed at: http://$PUBLIC_IP"

          # Wait for SSH to be available
          echo "Waiting for SSH to become available..."
          while ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/ec2_key.pem ec2-user@$PUBLIC_IP echo "SSH is up" 2>/dev/null; do
            sleep 5
          done

          # Start the Streamlit app
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ec2-user@$PUBLIC_IP << 'EOF'
            cd ~/streamlit-app
            source venv/bin/activate
            # Kill any existing Streamlit processes
            pkill -f "streamlit run" || true
            # Start the Streamlit app in the background
            nohup streamlit run app.py --server.address 0.0.0.0 --server.port 8501 > streamlit.log 2>&1 &
            echo "Streamlit app started!"
          EOF

          # Wait for the application to be available
          echo "Waiting for application to start (this may take a few minutes)..."
          timeout=300
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -s --head --request GET http://$PUBLIC_IP:8501 | grep "200 OK" > /dev/null; then
              echo "Application is up and running!"
              echo "You can access it at: http://$PUBLIC_IP:8501"
              break
            fi
            sleep 10
            elapsed=$((elapsed+10))
            echo "Still waiting... ($elapsed seconds elapsed)"
          done

          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for application to start. You may need to check the instance logs."
          fi
